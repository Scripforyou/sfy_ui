function GuiLibrary:CreateMultiDropdown(tab, dropdownName, options, defaultSelections, callback)
	local dropdown = Instance.new("TextButton")
	dropdown.Name = dropdownName
	dropdown.Size = UDim2.new(1, 0, 0, 35)
	dropdown.BackgroundColor3 = Theme.Secondary
	dropdown.BorderSizePixel = 0
	dropdown.Text = ""
	dropdown.Parent = tab.Frame
	
	local dropdownCorner = Instance.new("UICorner")
	dropdownCorner.CornerRadius = UDim.new(0, 8)
	dropdownCorner.Parent = dropdown
	
	local label = Instance.new("TextLabel")
	label.Name = "Label"
	label.Size = UDim2.new(0.4, 0, 1, 0)
	label.Position = UDim2.new(0, 15, 0, 0)
	label.BackgroundTransparency = 1
	label.Text = dropdownName
	label.TextColor3 = Theme.Text
	label.TextSize = 14
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.Font = Enum.Font.Gotham
	label.Parent = dropdown
	
	local valueLabel = Instance.new("TextLabel")
	valueLabel.Name = "Value"
	valueLabel.Size = UDim2.new(0.45, 0, 1, 0)
	valueLabel.Position = UDim2.new(0.4, 0, 0, 0)
	valueLabel.BackgroundTransparency = 1
	valueLabel.Text = "Select..."
	valueLabel.TextColor3 = Theme.TextSecondary
	valueLabel.TextSize = 11
	valueLabel.TextXAlignment = Enum.TextXAlignment.Left
	valueLabel.TextWrapped = true
	valueLabel.Font = Enum.Font.Gotham
	valueLabel.Parent = dropdown
	
	local arrow = Instance.new("TextLabel")
	arrow.Name = "Arrow"
	arrow.Size = UDim2.new(0, 20, 0, 20)
	arrow.Position = UDim2.new(1, -25, 0.5, -10)
	arrow.BackgroundTransparency = 1
	arrow.Text = "â–¼"
	arrow.TextColor3 = Theme.TextSecondary
	arrow.TextSize = 12
	arrow.Font = Enum.Font.Gotham
	arrow.Parent = dropdown
	
	-- Dropdown Options
	local optionsFrame = Instance.new("Frame")
	optionsFrame.Name = "Options"
	optionsFrame.Size = UDim2.new(1, 0, 0, 0)
	optionsFrame.Position = UDim2.new(0, 0, 1, 5)
	optionsFrame.BackgroundColor3 = Theme.Secondary
	optionsFrame.BorderSizePixel = 0
	optionsFrame.Visible = false
	optionsFrame.ClipsDescendants = true
	optionsFrame.Parent = dropdown
	
	local optionsCorner = Instance.new("UICorner")
	optionsCorner.CornerRadius = UDim.new(0, 8)
	optionsCorner.Parent = optionsFrame
	
	local optionsLayout = Instance.new("UIListLayout")
	optionsLayout.Padding = UDim.new(0, 2)
	optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
	optionsLayout.Parent = optionsFrame
	
	local optionsPadding = Instance.new("UIPadding")
	optionsPadding.PaddingTop = UDim.new(0, 5)
	optionsPadding.PaddingBottom = UDim.new(0, 5)
	optionsPadding.PaddingLeft = UDim.new(0, 5)
	optionsPadding.PaddingRight = UDim.new(0, 5)
	optionsPadding.Parent = optionsFrame
	
	local isOpen = false
	local selectedOptions = defaultSelections or {}
	local optionStates = {}
	
	-- Initialize option states
	for _, option in ipairs(options) do
		optionStates[option] = false
	end
	
	-- Set default selections
	if defaultSelections then
		for _, option in ipairs(defaultSelections) do
			if optionStates[option] ~= nil then
				optionStates[option] = true
			end
		end
	end
	
	local function updateDisplayText()
		local selectedCount = 0
		local displayText = ""
		
		for option, isSelected in pairs(optionStates) do
			if isSelected then
				selectedCount = selectedCount + 1
				if selectedCount == 1 then
					displayText = option
				elseif selectedCount == 2 then
					displayText = displayText .. ", " .. option
				elseif selectedCount == 3 then
					displayText = displayText .. ", +" .. (table.size(optionStates) - 2) .. " more"
					break
				end
			end
		end
		
		if selectedCount == 0 then
			valueLabel.Text = "Select..."
		else
			valueLabel.Text = displayText
		end
		
		-- Update selected options table
		selectedOptions = {}
		for option, isSelected in pairs(optionStates) do
			if isSelected then
				table.insert(selectedOptions, option)
			end
		end
	end
	
	updateDisplayText()
	
	-- Create option buttons with checkboxes
	local optionButtons = {}
	for i, option in ipairs(options) do
		local optionButton = Instance.new("TextButton")
		optionButton.Name = option
		optionButton.Size = UDim2.new(1, 0, 0, 25)
		optionButton.BackgroundColor3 = Theme.Secondary
		optionButton.BorderSizePixel = 0
		optionButton.Text = ""
		optionButton.LayoutOrder = i
		optionButton.Parent = optionsFrame
		
		local optionCorner = Instance.new("UICorner")
		optionCorner.CornerRadius = UDim.new(0, 6)
		optionCorner.Parent = optionButton
		
		local checkbox = Instance.new("Frame")
		checkbox.Name = "Checkbox"
		checkbox.Size = UDim2.new(0, 16, 0, 16)
		checkbox.Position = UDim2.new(0, 8, 0.5, -8)
		checkbox.BackgroundColor3 = Theme.Secondary
		checkbox.BorderSizePixel = 0
		checkbox.Parent = optionButton
		
		local checkboxCorner = Instance.new("UICorner")
		checkboxCorner.CornerRadius = UDim.new(0, 4)
		checkboxCorner.Parent = checkbox
		
		local checkmark = Instance.new("ImageLabel")
		checkmark.Name = "Checkmark"
		checkmark.Size = UDim2.new(0, 12, 0, 12)
		checkmark.Position = UDim2.new(0.5, -6, 0.5, -6)
		checkmark.BackgroundTransparency = 1
		checkmark.Image = "rbxassetid://10734996880" -- Checkmark icon
		checkmark.ImageColor3 = Theme.Text
		checkmark.Visible = false
		checkmark.Parent = checkbox
		
		local optionText = Instance.new("TextLabel")
		optionText.Name = "Text"
		optionText.Size = UDim2.new(1, -35, 1, 0)
		optionText.Position = UDim2.new(0, 30, 0, 0)
		optionText.BackgroundTransparency = 1
		optionText.Text = option
		optionText.TextColor3 = Theme.TextSecondary
		optionText.TextSize = 12
		optionText.TextXAlignment = Enum.TextXAlignment.Left
		optionText.Font = Enum.Font.Gotham
		optionText.Parent = optionButton
		
		-- Update checkbox appearance based on current state
		local function updateCheckbox()
			if optionStates[option] then
				checkbox.BackgroundColor3 = Theme.Accent
				checkmark.Visible = true
				optionText.TextColor3 = Theme.Text
			else
				checkbox.BackgroundColor3 = Theme.Secondary
				checkmark.Visible = false
				optionText.TextColor3 = Theme.TextSecondary
			end
		end
		
		updateCheckbox()
		
		-- Toggle selection
		optionButton.MouseButton1Click:Connect(function()
			optionStates[option] = not optionStates[option]
			updateCheckbox()
			updateDisplayText()
			
			if callback then
				callback(selectedOptions, option, optionStates[option])
			end
		end)
		
		-- Hover effects
		optionButton.MouseEnter:Connect(function()
			if not isMobile then
				TweenService:Create(optionButton, TweenInfo.new(0.1), {BackgroundColor3 = Theme.AccentHover}):Play()
			end
		end)
		
		optionButton.MouseLeave:Connect(function()
			if not isMobile then
				TweenService:Create(optionButton, TweenInfo.new(0.1), {BackgroundColor3 = Theme.Secondary}):Play()
			end
		end)
		
		table.insert(optionButtons, optionButton)
	end
	
	-- Toggle dropdown
	dropdown.MouseButton1Click:Connect(function()
		isOpen = not isOpen
		
		if isOpen then
			optionsFrame.Visible = true
			local height = math.min(#options * 27 + 10, 200) -- Max height 200
			TweenService:Create(arrow, TweenInfo.new(0.2), {Rotation = 180}):Play()
			TweenService:Create(optionsFrame, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, height)}):Play()
		else
			TweenService:Create(arrow, TweenInfo.new(0.2), {Rotation = 0}):Play()
			TweenService:Create(optionsFrame, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 0)}):Play()
			wait(0.2)
			optionsFrame.Visible = false
		end
	end)
	
	-- Close dropdown when clicking outside
	local function closeDropdown(input)
		if isOpen and input.UserInputType == Enum.UserInputType.MouseButton1 then
			local mousePos = input.Position
			local dropdownAbsPos = dropdown.AbsolutePosition
			local dropdownSize = dropdown.AbsoluteSize
			local optionsAbsPos = optionsFrame.AbsolutePosition
			local optionsSize = optionsFrame.AbsoluteSize
			
			if not (mousePos.X >= dropdownAbsPos.X and mousePos.X <= dropdownAbsPos.X + dropdownSize.X and
				   mousePos.Y >= dropdownAbsPos.Y and mousePos.Y <= dropdownAbsPos.Y + dropdownSize.Y + optionsSize.Y) then
				isOpen = false
				TweenService:Create(arrow, TweenInfo.new(0.2), {Rotation = 0}):Play()
				TweenService:Create(optionsFrame, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 0)}):Play()
				wait(0.2)
				optionsFrame.Visible = false
			end
		end
	end
	
	UserInputService.InputBegan:Connect(closeDropdown)
	
	-- Function to get current selections
	function dropdown:GetSelections()
		return selectedOptions
	end
	
	-- Function to set selections
	function dropdown:SetSelections(selections)
		for option, _ in pairs(optionStates) do
			optionStates[option] = false
		end
		
		if selections then
			for _, option in ipairs(selections) do
				if optionStates[option] ~= nil then
					optionStates[option] = true
				end
			end
		end
		
		updateDisplayText()
		
		-- Update checkboxes
		for _, optionButton in ipairs(optionButtons) do
			local option = optionButton.Name
			local checkbox = optionButton:FindFirstChild("Checkbox")
			local checkmark = checkbox and checkbox:FindFirstChild("Checkmark")
			local optionText = optionButton:FindFirstChild("Text")
			
			if checkbox and checkmark and optionText then
				if optionStates[option] then
					checkbox.BackgroundColor3 = Theme.Accent
					checkmark.Visible = true
					optionText.TextColor3 = Theme.Text
				else
					checkbox.BackgroundColor3 = Theme.Secondary
					checkmark.Visible = false
					optionText.TextColor3 = Theme.TextSecondary
				end
			end
		end
	end
	
	-- Function to clear all selections
	function dropdown:ClearSelections()
		dropdown:SetSelections({})
	end
	
	return dropdown
end
