-- GUI Library
local GuiLibrary = {}
GuiLibrary.__index = GuiLibrary

-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Player
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Color Theme (Space/LootLabs Inspired)
local Theme = {
	Background = Color3.fromRGB(20, 20, 35),
	Secondary = Color3.fromRGB(30, 30, 50),
	Accent = Color3.fromRGB(100, 150, 255),
	AccentHover = Color3.fromRGB(120, 170, 255),
	Text = Color3.fromRGB(255, 255, 255),
	TextSecondary = Color3.fromRGB(200, 200, 220),
	Success = Color3.fromRGB(100, 255, 150),
	Danger = Color3.fromRGB(255, 100, 100)
}

-- ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "GuiLibrary"
screenGui.ResetOnSpawn = false
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
screenGui.Parent = playerGui

-- Main Container
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 350, 0, 450)
mainFrame.Position = UDim2.new(0, 10, 0, 10)
mainFrame.BackgroundColor3 = Theme.Background
mainFrame.BorderSizePixel = 0
mainFrame.ClipsDescendants = true
mainFrame.Parent = screenGui

-- Corner
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 12)
corner.Parent = mainFrame

-- Shadow
local shadow = Instance.new("ImageLabel")
shadow.Name = "Shadow"
shadow.Size = UDim2.new(1, 15, 1, 15)
shadow.Position = UDim2.new(0, -7, 0, -7)
shadow.BackgroundTransparency = 1
shadow.Image = "rbxassetid://1316045217"
shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
shadow.ImageTransparency = 0.85
shadow.ScaleType = Enum.ScaleType.Slice
shadow.SliceCenter = Rect.new(10, 10, 118, 118)
shadow.Parent = mainFrame

-- Title Bar
local titleBar = Instance.new("Frame")
titleBar.Name = "TitleBar"
titleBar.Size = UDim2.new(1, 0, 0, 35)
titleBar.BackgroundColor3 = Theme.Secondary
titleBar.BorderSizePixel = 0
titleBar.Parent = mainFrame

local titleCorner = Instance.new("UICorner")
titleCorner.CornerRadius = UDim.new(0, 12)
titleCorner.Parent = titleBar

local title = Instance.new("TextLabel")
title.Name = "Title"
title.Size = UDim2.new(1, -70, 1, 0)
title.Position = UDim2.new(0, 15, 0, 0)
title.BackgroundTransparency = 1
title.Text = "SFY GUI"
title.TextColor3 = Theme.Text
title.TextSize = 16
title.TextXAlignment = Enum.TextXAlignment.Left
title.Font = Enum.Font.GothamBold
title.Parent = titleBar

-- Minimize Button
local minimizeButton = Instance.new("TextButton")
minimizeButton.Name = "MinimizeButton"
minimizeButton.Size = UDim2.new(0, 30, 0, 30)
minimizeButton.Position = UDim2.new(1, -35, 0.5, -15)
minimizeButton.BackgroundColor3 = Theme.Accent
minimizeButton.BorderSizePixel = 0
minimizeButton.Text = "âˆ’"
minimizeButton.TextColor3 = Theme.Text
minimizeButton.TextSize = 18
minimizeButton.Font = Enum.Font.GothamBold
minimizeButton.Parent = titleBar

local minimizeCorner = Instance.new("UICorner")
minimizeCorner.CornerRadius = UDim.new(0, 6)
minimizeCorner.Parent = minimizeButton

-- Content Area
local contentArea = Instance.new("Frame")
contentArea.Name = "ContentArea"
contentArea.Size = UDim2.new(1, 0, 1, -35)
contentArea.Position = UDim2.new(0, 0, 0, 35)
contentArea.BackgroundTransparency = 1
contentArea.Parent = mainFrame

-- Tab Container (Left Side)
local tabContainer = Instance.new("ScrollingFrame")
tabContainer.Name = "TabContainer"
tabContainer.Size = UDim2.new(0, 100, 1, 0)
tabContainer.Position = UDim2.new(0, 0, 0, 0)
tabContainer.BackgroundColor3 = Theme.Secondary
tabContainer.BorderSizePixel = 0
tabContainer.ScrollBarThickness = 4
tabContainer.ScrollBarImageColor3 = Theme.Accent
tabContainer.Parent = contentArea

local tabLayout = Instance.new("UIListLayout")
tabLayout.Padding = UDim.new(0, 5)
tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
tabLayout.Parent = tabContainer

local tabPadding = Instance.new("UIPadding")
tabPadding.PaddingTop = UDim.new(0, 10)
tabPadding.PaddingLeft = UDim.new(0, 5)
tabPadding.PaddingRight = UDim.new(0, 5)
tabPadding.Parent = tabContainer

-- Tab Content
local tabContent = Instance.new("ScrollingFrame")
tabContent.Name = "TabContent"
tabContent.Size = UDim2.new(1, -105, 1, 0)
tabContent.Position = UDim2.new(0, 105, 0, 0)
tabContent.BackgroundTransparency = 1
tabContent.ScrollBarThickness = 4
tabContent.ScrollBarImageColor3 = Theme.Accent
tabContent.ClipsDescendants = true
tabContent.Parent = contentArea

local contentLayout = Instance.new("UIListLayout")
contentLayout.Padding = UDim.new(0, 8)
contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
contentLayout.Parent = tabContent

local contentPadding = Instance.new("UIPadding")
contentPadding.PaddingTop = UDim.new(0, 10)
contentPadding.PaddingLeft = UDim.new(0, 10)
contentPadding.PaddingRight = UDim.new(0, 10)
contentPadding.Parent = tabContent

-- Minimized Icon (SFY Square)
local minimizedIcon = Instance.new("TextButton")
minimizedIcon.Name = "MinimizedIcon"
minimizedIcon.Size = UDim2.new(0, 60, 0, 60)
minimizedIcon.Position = UDim2.new(0, 10, 0, 10)
minimizedIcon.BackgroundColor3 = Theme.Accent
minimizedIcon.BorderSizePixel = 0
minimizedIcon.Text = "SFY"
minimizedIcon.TextColor3 = Theme.Text
minimizedIcon.TextSize = 14
minimizedIcon.TextScaled = true
minimizedIcon.Visible = false
minimizedIcon.Parent = screenGui

local iconCorner = Instance.new("UICorner")
iconCorner.CornerRadius = UDim.new(0, 8)
iconCorner.Parent = minimizedIcon

local iconShadow = Instance.new("ImageLabel")
iconShadow.Name = "Shadow"
iconShadow.Size = UDim2.new(1, 15, 1, 15)
iconShadow.Position = UDim2.new(0, -7, 0, -7)
iconShadow.BackgroundTransparency = 1
iconShadow.Image = "rbxassetid://1316045217"
iconShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
iconShadow.ImageTransparency = 0.85
iconShadow.ScaleType = Enum.ScaleType.Slice
iconShadow.SliceCenter = Rect.new(10, 10, 118, 118)
iconShadow.Parent = minimizedIcon

-- Variables
local isMinimized = false
local currentTab = nil
local tabs = {}
local buttons = {}
local isMobile = UserInputService.TouchEnabled

-- Make frames draggable
local dragging = false
local dragInput
local dragStart
local startPos

local function updateInput(input)
	local delta = input.Position - dragStart
	mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

local function updateIconInput(input)
	local delta = input.Position - dragStart
	minimizedIcon.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

-- Main frame dragging
titleBar.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
		startPos = mainFrame.Position
		
		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)

titleBar.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		dragInput = input
	end
end)

-- Icon dragging
minimizedIcon.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
		startPos = minimizedIcon.Position
		
		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)

minimizedIcon.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		dragInput = input
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if input == dragInput and dragging then
		if isMinimized then
			updateIconInput(input)
		else
			updateInput(input)
		end
	end
end)

-- Toggle minimize
local function toggleMinimize()
	if isMinimized then
		-- Expand
		mainFrame.Visible = true
		minimizedIcon.Visible = false
		isMinimized = false
	else
		-- Minimize
		mainFrame.Visible = false
		minimizedIcon.Visible = true
		isMinimized = true
	end
end

minimizeButton.MouseButton1Click:Connect(toggleMinimize)
minimizedIcon.MouseButton1Click:Connect(toggleMinimize)

-- Adjust for mobile
if isMobile then
	mainFrame.Size = UDim2.new(0, 320, 0, 400)
	mainFrame.Position = UDim2.new(0.5, -160, 0.5, -200)
	mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
	
	minimizedIcon.Size = UDim2.new(0, 70, 0, 70)
end

-- Update scrolling frames
tabLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
	tabContainer.CanvasSize = UDim2.new(0, 0, 0, tabLayout.AbsoluteContentSize.Y + 20)
end)

contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
	tabContent.CanvasSize = UDim2.new(0, 0, 0, contentLayout.AbsoluteContentSize.Y + 20)
end)

-- Library Functions
function GuiLibrary.new(name)
	local self = setmetatable({}, GuiLibrary)
	
	title.Text = name or "SFY GUI"
	minimizedIcon.Text = name and string.sub(name, 1, 3) or "SFY"
	
	return self
end

function GuiLibrary:CreateTab(tabName, icon)
	local tabButton = Instance.new("TextButton")
	tabButton.Name = tabName
	tabButton.Size = UDim2.new(1, 0, 0, 35)
	tabButton.BackgroundColor3 = Theme.Secondary
	tabButton.BorderSizePixel = 0
	tabButton.Text = tabName
	tabButton.TextColor3 = Theme.TextSecondary
	tabButton.TextSize = 13
	tabButton.Font = Enum.Font.Gotham
	tabButton.LayoutOrder = #tabs
	tabButton.Parent = tabContainer
	
	local tabCorner = Instance.new("UICorner")
	tabCorner.CornerRadius = UDim.new(0, 8)
	tabCorner.Parent = tabButton
	
	local tabFrame = Instance.new("Frame")
	tabFrame.Name = tabName
	tabFrame.Size = UDim2.new(1, 0, 1, 0)
	tabFrame.Position = UDim2.new(0, 0, 0, 0)
	tabFrame.BackgroundTransparency = 1
	tabFrame.Visible = false
	tabFrame.Parent = tabContent
	
	local tabLayout = Instance.new("UIListLayout")
	tabLayout.Padding = UDim.new(0, 8)
	tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
	tabLayout.Parent = tabFrame
	
	local tabPadding = Instance.new("UIPadding")
	tabPadding.PaddingTop = UDim.new(0, 5)
	tabPadding.Parent = tabFrame
	
	local tabData = {
		Button = tabButton,
		Frame = tabFrame,
		Name = tabName
	}
	
	table.insert(tabs, tabData)
	
	-- Set as current tab if first tab
	if #tabs == 1 then
		currentTab = tabData
		tabButton.BackgroundColor3 = Theme.Accent
		tabButton.TextColor3 = Theme.Text
		tabFrame.Visible = true
	end
	
	-- Tab button click event
	tabButton.MouseButton1Click:Connect(function()
		if currentTab then
			currentTab.Button.BackgroundColor3 = Theme.Secondary
			currentTab.Button.TextColor3 = Theme.TextSecondary
			currentTab.Frame.Visible = false
		end
		
		currentTab = tabData
		tabButton.BackgroundColor3 = Theme.Accent
		tabButton.TextColor3 = Theme.Text
		tabFrame.Visible = true
	end)
	
	return tabData
end

function GuiLibrary:CreateButton(tab, buttonName, callback)
	local button = Instance.new("TextButton")
	button.Name = buttonName
	button.Size = UDim2.new(1, 0, 0, 35)
	button.BackgroundColor3 = Theme.Secondary
	button.BorderSizePixel = 0
	button.Text = buttonName
	button.TextColor3 = Theme.Text
	button.TextSize = 14
	button.Font = Enum.Font.Gotham
	button.Parent = tab.Frame
	
	local buttonCorner = Instance.new("UICorner")
	buttonCorner.CornerRadius = UDim.new(0, 8)
	buttonCorner.Parent = button
	
	-- Button effects
	button.MouseEnter:Connect(function()
		if not isMobile then
			TweenService:Create(button, TweenInfo.new(0.1), {BackgroundColor3 = Theme.AccentHover}):Play()
		end
	end)
	
	button.MouseLeave:Connect(function()
		if not isMobile then
			TweenService:Create(button, TweenInfo.new(0.1), {BackgroundColor3 = Theme.Secondary}):Play()
		end
	end)
	
	button.MouseButton1Click:Connect(function()
		TweenService:Create(button, TweenInfo.new(0.1), {BackgroundColor3 = Theme.Accent}):Play()
		TweenService:Create(button, TweenInfo.new(0.1), {BackgroundColor3 = Theme.Secondary}):Play()
		
		if callback then
			callback()
		end
	end)
	
	table.insert(buttons, button)
	
	return button
end

function GuiLibrary:CreateLabel(tab, labelText)
	local label = Instance.new("TextLabel")
	label.Name = "Label"
	label.Size = UDim2.new(1, 0, 0, 25)
	label.BackgroundTransparency = 1
	label.Text = labelText
	label.TextColor3 = Theme.TextSecondary
	label.TextSize = 14
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.Font = Enum.Font.Gotham
	label.Parent = tab.Frame
	
	return label
end

function GuiLibrary:CreateToggle(tab, toggleName, defaultState, callback)
	local toggle = Instance.new("TextButton")
	toggle.Name = toggleName
	toggle.Size = UDim2.new(1, 0, 0, 35)
	toggle.BackgroundColor3 = Theme.Secondary
	toggle.BorderSizePixel = 0
	toggle.Text = ""
	toggle.Parent = tab.Frame
	
	local toggleCorner = Instance.new("UICorner")
	toggleCorner.CornerRadius = UDim.new(0, 8)
	toggleCorner.Parent = toggle
	
	local label = Instance.new("TextLabel")
	label.Name = "Label"
	label.Size = UDim2.new(0.7, 0, 1, 0)
	label.Position = UDim2.new(0, 15, 0, 0)
	label.BackgroundTransparency = 1
	label.Text = toggleName
	label.TextColor3 = Theme.Text
	label.TextSize = 14
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.Font = Enum.Font.Gotham
	label.Parent = toggle
	
	local toggleFrame = Instance.new("Frame")
	toggleFrame.Name = "Toggle"
	toggleFrame.Size = UDim2.new(0, 45, 0, 22)
	toggleFrame.Position = UDim2.new(1, -50, 0.5, -11)
	toggleFrame.BackgroundColor3 = Theme.Secondary
	toggleFrame.BorderSizePixel = 0
	toggleFrame.Parent = toggle
	
	local toggleCorner2 = Instance.new("UICorner")
	toggleCorner2.CornerRadius = UDim.new(0, 11)
	toggleCorner2.Parent = toggleFrame
	
	local toggleDot = Instance.new("Frame")
	toggleDot.Name = "Dot"
	toggleDot.Size = UDim2.new(0, 18, 0, 18)
	toggleDot.Position = UDim2.new(0, 2, 0, 2)
	toggleDot.BackgroundColor3 = Theme.Text
	toggleDot.BorderSizePixel = 0
	toggleDot.Parent = toggleFrame
	
	local toggleCorner3 = Instance.new("UICorner")
	toggleCorner3.CornerRadius = UDim.new(1, 0)
	toggleCorner3.Parent = toggleDot
	
	local state = defaultState or false
	
	local function updateToggle()
		if state then
			TweenService:Create(toggleFrame, TweenInfo.new(0.1), {BackgroundColor3 = Theme.Success}):Play()
			TweenService:Create(toggleDot, TweenInfo.new(0.1), {Position = UDim2.new(0, 25, 0, 2)}):Play()
		else
			TweenService:Create(toggleFrame, TweenInfo.new(0.1), {BackgroundColor3 = Theme.Secondary}):Play()
			TweenService:Create(toggleDot, TweenInfo.new(0.1), {Position = UDim2.new(0, 2, 0, 2)}):Play()
		end
		
		if callback then
			callback(state)
		end
	end
	
	updateToggle()
	
	toggle.MouseButton1Click:Connect(function()
		state = not state
		updateToggle()
	end)
	
	return toggle
end

function GuiLibrary:CreateSlider(tab, sliderName, minValue, maxValue, defaultValue, callback)
	local slider = Instance.new("Frame")
	slider.Name = sliderName
	slider.Size = UDim2.new(1, 0, 0, 60)
	slider.BackgroundTransparency = 1
	slider.Parent = tab.Frame
	
	local label = Instance.new("TextLabel")
	label.Name = "Label"
	label.Size = UDim2.new(1, 0, 0, 20)
	label.BackgroundTransparency = 1
	label.Text = sliderName
	label.TextColor3 = Theme.Text
	label.TextSize = 14
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.Font = Enum.Font.Gotham
	label.Parent = slider
	
	local valueLabel = Instance.new("TextLabel")
	valueLabel.Name = "Value"
	valueLabel.Size = UDim2.new(0, 60, 0, 20)
	valueLabel.Position = UDim2.new(1, -60, 0, 0)
	valueLabel.BackgroundTransparency = 1
	valueLabel.Text = tostring(defaultValue or minValue)
	valueLabel.TextColor3 = Theme.TextSecondary
	valueLabel.TextSize = 14
	valueLabel.TextXAlignment = Enum.TextXAlignment.Right
	valueLabel.Font = Enum.Font.Gotham
	valueLabel.Parent = slider
	
	local sliderTrack = Instance.new("Frame")
	sliderTrack.Name = "Track"
	sliderTrack.Size = UDim2.new(1, 0, 0, 8)
	sliderTrack.Position = UDim2.new(0, 0, 0, 35)
	sliderTrack.BackgroundColor3 = Theme.Secondary
	sliderTrack.BorderSizePixel = 0
	sliderTrack.Parent = slider
	
	local trackCorner = Instance.new("UICorner")
	trackCorner.CornerRadius = UDim.new(0, 4)
	trackCorner.Parent = sliderTrack
	
	local sliderFill = Instance.new("Frame")
	sliderFill.Name = "Fill"
	sliderFill.Size = UDim2.new(0, 0, 1, 0)
	sliderFill.BackgroundColor3 = Theme.Accent
	sliderFill.BorderSizePixel = 0
	sliderFill.Parent = sliderTrack
	
	local fillCorner = Instance.new("UICorner")
	fillCorner.CornerRadius = UDim.new(0, 4)
	fillCorner.Parent = sliderFill
	
	local sliderThumb = Instance.new("TextButton")
	sliderThumb.Name = "Thumb"
	sliderThumb.Size = UDim2.new(0, 18, 0, 18)
	sliderThumb.Position = UDim2.new(0, -9, 0.5, -9)
	sliderThumb.BackgroundColor3 = Theme.Text
	sliderThumb.BorderSizePixel = 0
	sliderThumb.Text = ""
	sliderThumb.Parent = sliderTrack
	
	local thumbCorner = Instance.new("UICorner")
	thumbCorner.CornerRadius = UDim.new(1, 0)
	thumbCorner.Parent = sliderThumb
	
	local currentValue = defaultValue or minValue
	local isDragging = false
	
	local function updateSlider(value)
		currentValue = math.clamp(value, minValue, maxValue)
		local percentage = (currentValue - minValue) / (maxValue - minValue)
		
		sliderFill.Size = UDim2.new(percentage, 0, 1, 0)
		sliderThumb.Position = UDim2.new(percentage, -9, 0.5, -9)
		valueLabel.Text = tostring(math.floor(currentValue))
		
		if callback then
			callback(currentValue)
		end
	end
	
	updateSlider(currentValue)
	
	local function onInputChanged(input)
		if isDragging then
			local relativeX = (input.Position.X - sliderTrack.AbsolutePosition.X) / sliderTrack.AbsoluteSize.X
			local value = minValue + (relativeX * (maxValue - minValue))
			updateSlider(value)
		end
	end
	
	sliderThumb.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			isDragging = true
		end
	end)
	
	sliderThumb.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			isDragging = false
		end
	end)
	
	sliderTrack.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			isDragging = true
			local relativeX = (input.Position.X - sliderTrack.AbsolutePosition.X) / sliderTrack.AbsoluteSize.X
			local value = minValue + (relativeX * (maxValue - minValue))
			updateSlider(value)
		end
	end)
	
	sliderTrack.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			isDragging = false
		end
	end)
	
	UserInputService.InputChanged:Connect(function(input)
		if isDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
			onInputChanged(input)
		end
	end)
	
	return slider
end
-- Single Dropdown
function GuiLibrary:CreateDropdown(tab, dropdownName, options, defaultSelection, callback)
    local dropdown = Instance.new("TextButton")
    dropdown.Name = "Dropdown_" .. dropdownName
    dropdown.Size = UDim2.new(1, 0, 0, 35)
    dropdown.BackgroundColor3 = Theme.Secondary
    dropdown.BorderSizePixel = 0
    dropdown.Text = ""
    dropdown.ZIndex = 5
    dropdown.Parent = tab.Frame
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = dropdown
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.Size = UDim2.new(0.7, 0, 1, 0)
    label.Position = UDim2.new(0, 15, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = dropdownName
    label.TextColor3 = Theme.Text
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Font = Enum.Font.Gotham
    label.ZIndex = 6
    label.Parent = dropdown
    
    local valueLabel = Instance.new("TextLabel")
    valueLabel.Name = "Value"
    valueLabel.Size = UDim2.new(0.25, 0, 1, 0)
    valueLabel.Position = UDim2.new(0.75, 0, 0, 0)
    valueLabel.BackgroundTransparency = 1
    valueLabel.Text = defaultSelection or "Select..."
    valueLabel.TextColor3 = Theme.TextSecondary
    valueLabel.TextSize = 12
    valueLabel.TextXAlignment = Enum.TextXAlignment.Right
    valueLabel.Font = Enum.Font.Gotham
    valueLabel.ZIndex = 6
    valueLabel.Parent = dropdown
    
    local arrow = Instance.new("TextLabel")
    arrow.Name = "Arrow"
    arrow.Size = UDim2.new(0, 20, 0, 20)
    arrow.Position = UDim2.new(1, -25, 0.5, -10)
    arrow.BackgroundTransparency = 1
    arrow.Text = "â–¼"
    arrow.TextColor3 = Theme.TextSecondary
    arrow.TextSize = 12
    arrow.Font = Enum.Font.Gotham
    arrow.ZIndex = 6
    arrow.Parent = dropdown
    
    -- Options Frame
    local optionsFrame = Instance.new("ScrollingFrame")
    optionsFrame.Name = "Options"
    optionsFrame.Size = UDim2.new(1, 0, 0, 0)
    optionsFrame.Position = UDim2.new(0, 0, 1, 5)
    optionsFrame.BackgroundColor3 = Theme.Secondary
    optionsFrame.BorderSizePixel = 0
    optionsFrame.ScrollBarThickness = 4
    optionsFrame.ScrollBarImageColor3 = Theme.Accent
    optionsFrame.Visible = false
    optionsFrame.ClipsDescendants = true
    optionsFrame.ZIndex = 20
    optionsFrame.Parent = dropdown
    
    local optionsCorner = Instance.new("UICorner")
    optionsCorner.CornerRadius = UDim.new(0, 8)
    optionsCorner.Parent = optionsFrame
    
    local optionsLayout = Instance.new("UIListLayout")
    optionsLayout.Padding = UDim.new(0, 2)
    optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    optionsLayout.Parent = optionsFrame
    
    local optionsPadding = Instance.new("UIPadding")
    optionsPadding.PaddingTop = UDim.new(0, 5)
    optionsPadding.PaddingBottom = UDim.new(0, 5)
    optionsPadding.PaddingLeft = UDim.new(0, 5)
    optionsPadding.PaddingRight = UDim.new(0, 5)
    optionsPadding.Parent = optionsFrame
    
    local isOpen = false
    local selectedOption = defaultSelection
    
    -- Create options
    for i, option in ipairs(options) do
        local optionButton = Instance.new("TextButton")
        optionButton.Name = option
        optionButton.Size = UDim2.new(1, 0, 0, 25)
        optionButton.BackgroundColor3 = Theme.Secondary
        optionButton.BorderSizePixel = 0
        optionButton.Text = option
        optionButton.TextColor3 = Theme.TextSecondary
        optionButton.TextSize = 12
        optionButton.Font = Enum.Font.Gotham
        optionButton.LayoutOrder = i
        optionButton.ZIndex = 21
        optionButton.Parent = optionsFrame
        
        local optionCorner = Instance.new("UICorner")
        optionCorner.CornerRadius = UDim.new(0, 6)
        optionCorner.Parent = optionButton
        
        optionButton.MouseButton1Click:Connect(function()
            selectedOption = option
            valueLabel.Text = option
            isOpen = false
            optionsFrame.Visible = false
            TweenService:Create(arrow, TweenInfo.new(0.2), {Rotation = 0}):Play()
            TweenService:Create(optionsFrame, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 0)}):Play()
            
            if callback then
                callback(option)
            end
        end)
        
        optionButton.MouseEnter:Connect(function()
            if not isMobile then
                TweenService:Create(optionButton, TweenInfo.new(0.1), {BackgroundColor3 = Theme.AccentHover}):Play()
                TweenService:Create(optionButton, TweenInfo.new(0.1), {TextColor3 = Theme.Text}):Play()
            end
        end)
        
        optionButton.MouseLeave:Connect(function()
            if not isMobile then
                TweenService:Create(optionButton, TweenInfo.new(0.1), {BackgroundColor3 = Theme.Secondary}):Play()
                TweenService:Create(optionButton, TweenInfo.new(0.1), {TextColor3 = Theme.TextSecondary}):Play()
            end
        end)
    end
    
    -- Update canvas size
    optionsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        optionsFrame.CanvasSize = UDim2.new(0, 0, 0, optionsLayout.AbsoluteContentSize.Y + 10)
    end)
    
    -- Toggle dropdown
    dropdown.MouseButton1Click:Connect(function()
        isOpen = not isOpen
        
        if isOpen then
            optionsFrame.Visible = true
            local height = math.min(#options * 27 + 10, 200)
            TweenService:Create(arrow, TweenInfo.new(0.2), {Rotation = 180}):Play()
            TweenService:Create(optionsFrame, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, height)}):Play()
        else
            TweenService:Create(arrow, TweenInfo.new(0.2), {Rotation = 0}):Play()
            TweenService:Create(optionsFrame, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 0)}):Play()
            wait(0.2)
            optionsFrame.Visible = false
        end
    end)
    
    -- Close dropdown
    local function closeDropdown(input)
        if isOpen and input.UserInputType == Enum.UserInputType.MouseButton1 then
            local mousePos = input.Position
            local dropdownAbsPos = dropdown.AbsolutePosition
            local dropdownSize = dropdown.AbsoluteSize
            local optionsAbsPos = optionsFrame.AbsolutePosition
            local optionsSize = optionsFrame.AbsoluteSize
            
            if not (mousePos.X >= dropdownAbsPos.X and mousePos.X <= dropdownAbsPos.X + dropdownSize.X and
                   mousePos.Y >= dropdownAbsPos.Y and mousePos.Y <= dropdownAbsPos.Y + dropdownSize.Y + optionsSize.Y) then
                isOpen = false
                TweenService:Create(arrow, TweenInfo.new(0.2), {Rotation = 0}):Play()
                TweenService:Create(optionsFrame, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 0)}):Play()
                wait(0.2)
                optionsFrame.Visible = false
            end
        end
    end
    
    UserInputService.InputBegan:Connect(closeDropdown)
    
    -- Create dropdown object with methods
    local dropdownObj = {}
    
    function dropdownObj:GetSelection()
        return selectedOption
    end
    
    function dropdownObj:SetSelection(selection)
        if selection then
            selectedOption = selection
            valueLabel.Text = selection
        else
            selectedOption = nil
            valueLabel.Text = "Select..."
        end
    end
    
    function dropdownObj:GetInstance()
        return dropdown
    end
    
    return dropdownObj
end

-- multi dropdown
function GuiLibrary:CreateMultiDropdown(tab, dropdownName, options, defaultSelections, callback)
	local multiDropdown = Instance.new("TextButton")
	multiDropdown.Name = "MultiDropdown_" .. dropdownName
	multiDropdown.Size = UDim2.new(1, 0, 0, 35)
	multiDropdown.BackgroundColor3 = Theme.Secondary
	multiDropdown.BorderSizePixel = 0
	multiDropdown.Text = ""
	multiDropdown.ZIndex = 10
	multiDropdown.Parent = tab.Frame
	
	local multiDropdownCorner = Instance.new("UICorner")
	multiDropdownCorner.CornerRadius = UDim.new(0, 8)
	multiDropdownCorner.Parent = multiDropdown
	
	local multiLabel = Instance.new("TextLabel")
	multiLabel.Name = "Label"
	multiLabel.Size = UDim2.new(0.4, 0, 1, 0)
	multiLabel.Position = UDim2.new(0, 15, 0, 0)
	multiLabel.BackgroundTransparency = 1
	multiLabel.Text = dropdownName
	multiLabel.TextColor3 = Theme.Text
	multiLabel.TextSize = 14
	multiLabel.TextXAlignment = Enum.TextXAlignment.Left
	multiLabel.Font = Enum.Font.Gotham
	multiLabel.ZIndex = 11
	multiLabel.Parent = multiDropdown
	
	local multiValueLabel = Instance.new("TextLabel")
	multiValueLabel.Name = "Value"
	multiValueLabel.Size = UDim2.new(0.45, 0, 1, 0)
	multiValueLabel.Position = UDim2.new(0.4, 0, 0, 0)
	multiValueLabel.BackgroundTransparency = 1
	multiValueLabel.Text = "Select..."
	multiValueLabel.TextColor3 = Theme.TextSecondary
	multiValueLabel.TextSize = 11
	multiValueLabel.TextXAlignment = Enum.TextXAlignment.Left
	multiValueLabel.TextWrapped = true
	multiValueLabel.Font = Enum.Font.Gotham
	multiValueLabel.ZIndex = 11
	multiValueLabel.Parent = multiDropdown
	
	local multiArrow = Instance.new("TextLabel")
	multiArrow.Name = "Arrow"
	multiArrow.Size = UDim2.new(0, 20, 0, 20)
	multiArrow.Position = UDim2.new(1, -25, 0.5, -10)
	multiArrow.BackgroundTransparency = 1
	multiArrow.Text = "â–¼"
	multiArrow.TextColor3 = Theme.TextSecondary
	multiArrow.TextSize = 12
	multiArrow.Font = Enum.Font.Gotham
	multiArrow.ZIndex = 11
	multiArrow.Parent = multiDropdown
	
	-- Multi Dropdown Options (HIGH Z-INDEX)
	local multiOptionsFrame = Instance.new("ScrollingFrame")
	multiOptionsFrame.Name = "Options"
	multiOptionsFrame.Size = UDim2.new(1, 0, 0, 0)
	multiOptionsFrame.Position = UDim2.new(0, 0, 1, 5)
	multiOptionsFrame.BackgroundColor3 = Theme.Secondary
	multiOptionsFrame.BorderSizePixel = 0
	multiOptionsFrame.ScrollBarThickness = 4
	multiOptionsFrame.ScrollBarImageColor3 = Theme.Accent
	multiOptionsFrame.Visible = false
	multiOptionsFrame.ClipsDescendants = true
	multiOptionsFrame.ZIndex = 100  -- Very high z-index to appear on top
	multiOptionsFrame.Parent = multiDropdown
	
	local multiOptionsCorner = Instance.new("UICorner")
	multiOptionsCorner.CornerRadius = UDim.new(0, 8)
	multiOptionsCorner.ZIndex = 101
	multiOptionsCorner.Parent = multiOptionsFrame
	
	local multiOptionsLayout = Instance.new("UIListLayout")
	multiOptionsLayout.Padding = UDim.new(0, 2)
	multiOptionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
	multiOptionsLayout.ZIndex = 101
	multiOptionsLayout.Parent = multiOptionsFrame
	
	local multiOptionsPadding = Instance.new("UIPadding")
	multiOptionsPadding.PaddingTop = UDim.new(0, 5)
	multiOptionsPadding.PaddingBottom = UDim.new(0, 5)
	multiOptionsPadding.PaddingLeft = UDim.new(0, 5)
	multiOptionsPadding.PaddingRight = UDim.new(0, 5)
	multiOptionsPadding.ZIndex = 101
	multiOptionsPadding.Parent = multiOptionsFrame
	
	local multiIsOpen = false
	local multiSelectedOptions = {}
	local multiOptionStates = {}
	
	-- Initialize option states and set defaults
	for _, option in ipairs(options) do
		multiOptionStates[option] = false
	end
	
	-- Set default selections
	if defaultSelections then
		for _, option in ipairs(defaultSelections) do
			if multiOptionStates[option] ~= nil then
				multiOptionStates[option] = true
				table.insert(multiSelectedOptions, option)
			end
		end
	end
	
	local function updateMultiDisplayText()
		local selectedCount = 0
		local displayText = ""
		
		for optionValue, isSelected in pairs(multiOptionStates) do
			if isSelected then
				selectedCount = selectedCount + 1
				if selectedCount == 1 then
					displayText = optionValue
				elseif selectedCount == 2 then
					displayText = displayText .. ", " .. optionValue
				elseif selectedCount == 3 then
					displayText = displayText .. ", +" .. (selectedCount - 2) .. " more"
					break
				end
			end
		end
		
		if selectedCount == 0 then
			multiValueLabel.Text = "Select..."
		else
			multiValueLabel.Text = displayText
		end
		
		-- Update selected options table
		multiSelectedOptions = {}
		for optionValue, isSelected in pairs(multiOptionStates) do
			if isSelected then
				table.insert(multiSelectedOptions, optionValue)
			end
		end
	end
	
	updateMultiDisplayText()
	
	-- Create multi option buttons with checkboxes (HIGH Z-INDEX)
	local multiOptionButtons = {}
	for i, option in ipairs(options) do
		local multiOptionButton = Instance.new("TextButton")
		multiOptionButton.Name = option
		multiOptionButton.Size = UDim2.new(1, 0, 0, 25)
		multiOptionButton.BackgroundColor3 = Theme.Secondary
		multiOptionButton.BorderSizePixel = 0
		multiOptionButton.Text = ""
		multiOptionButton.LayoutOrder = i
		multiOptionButton.ZIndex = 102  -- Higher than options frame
		multiOptionButton.Parent = multiOptionsFrame
		
		local multiOptionCorner = Instance.new("UICorner")
		multiOptionCorner.CornerRadius = UDim.new(0, 6)
		multiOptionCorner.ZIndex = 103
		multiOptionCorner.Parent = multiOptionButton
		
		local multiCheckbox = Instance.new("Frame")
		multiCheckbox.Name = "Checkbox"
		multiCheckbox.Size = UDim2.new(0, 16, 0, 16)
		multiCheckbox.Position = UDim2.new(0, 8, 0.5, -8)
		multiCheckbox.BackgroundColor3 = Theme.Secondary
		multiCheckbox.BorderSizePixel = 0
		multiCheckbox.ZIndex = 103
		multiCheckbox.Parent = multiOptionButton
		
		local multiCheckboxCorner = Instance.new("UICorner")
		multiCheckboxCorner.CornerRadius = UDim.new(0, 4)
		multiCheckboxCorner.ZIndex = 104
		multiCheckboxCorner.Parent = multiCheckbox
		
		local multiCheckmark = Instance.new("ImageLabel")
		multiCheckmark.Name = "Checkmark"
		multiCheckmark.Size = UDim2.new(0, 12, 0, 12)
		multiCheckmark.Position = UDim2.new(0.5, -6, 0.5, -6)
		multiCheckmark.BackgroundTransparency = 1
		multiCheckmark.Image = "rbxassetid://10734996880"
		multiCheckmark.ImageColor3 = Theme.Text
		multiCheckmark.Visible = multiOptionStates[option]
		multiCheckmark.ZIndex = 105  -- Highest z-index for checkmark
		multiCheckmark.Parent = multiCheckbox
		
		local multiOptionText = Instance.new("TextLabel")
		multiOptionText.Name = "Text"
		multiOptionText.Size = UDim2.new(1, -35, 1, 0)
		multiOptionText.Position = UDim2.new(0, 30, 0, 0)
		multiOptionText.BackgroundTransparency = 1
		multiOptionText.Text = option
		multiOptionText.TextColor3 = multiOptionStates[option] and Theme.Text or Theme.TextSecondary
		multiOptionText.TextSize = 12
		multiOptionText.TextXAlignment = Enum.TextXAlignment.Left
		multiOptionText.Font = Enum.Font.Gotham
		multiOptionText.ZIndex = 103
		multiOptionText.Parent = multiOptionButton
		
		-- Update checkbox appearance based on current state
		local function updateMultiCheckbox()
			if multiOptionStates[option] then
				multiCheckbox.BackgroundColor3 = Theme.Accent
				multiCheckmark.Visible = true
				multiOptionText.TextColor3 = Theme.Text
			else
				multiCheckbox.BackgroundColor3 = Theme.Secondary
				multiCheckmark.Visible = false
				multiOptionText.TextColor3 = Theme.TextSecondary
			end
		end
		
		-- Set initial checkbox state
		updateMultiCheckbox()
		
		-- Toggle multi selection
		multiOptionButton.MouseButton1Click:Connect(function()
			multiOptionStates[option] = not multiOptionStates[option]
			updateMultiCheckbox()
			updateMultiDisplayText()
			
			if callback then
				callback(multiSelectedOptions, option, multiOptionStates[option])
			end
		end)
		
		-- Multi hover effects
		multiOptionButton.MouseEnter:Connect(function()
			if not isMobile then
				TweenService:Create(multiOptionButton, TweenInfo.new(0.1), {BackgroundColor3 = Theme.AccentHover}):Play()
			end
		end)
		
		multiOptionButton.MouseLeave:Connect(function()
			if not isMobile then
				TweenService:Create(multiOptionButton, TweenInfo.new(0.1), {BackgroundColor3 = Theme.Secondary}):Play()
			end
		end)
		
		table.insert(multiOptionButtons, multiOptionButton)
	end
	
	-- Update multi scrolling frame size
	multiOptionsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
		multiOptionsFrame.CanvasSize = UDim2.new(0, 0, 0, multiOptionsLayout.AbsoluteContentSize.Y + 10)
	end)
	
	-- Toggle multi dropdown
	multiDropdown.MouseButton1Click:Connect(function()
		multiIsOpen = not multiIsOpen
		
		if multiIsOpen then
			-- Bring to front by setting high z-index
			multiDropdown.ZIndex = 99
			multiOptionsFrame.Visible = true
			local height = math.min(#options * 27 + 10, 200)
			TweenService:Create(multiArrow, TweenInfo.new(0.2), {Rotation = 180}):Play()
			TweenService:Create(multiOptionsFrame, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, height)}):Play()
		else
			-- Reset z-index when closed
			multiDropdown.ZIndex = 10
			TweenService:Create(multiArrow, TweenInfo.new(0.2), {Rotation = 0}):Play()
			TweenService:Create(multiOptionsFrame, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 0)}):Play()
			wait(0.2)
			multiOptionsFrame.Visible = false
		end
	end)
	
	-- Close multi dropdown when clicking outside
	local function closeMultiDropdown(input)
		if multiIsOpen and input.UserInputType == Enum.UserInputType.MouseButton1 then
			local mousePos = input.Position
			local dropdownAbsPos = multiDropdown.AbsolutePosition
			local dropdownSize = multiDropdown.AbsoluteSize
			local optionsAbsPos = multiOptionsFrame.AbsolutePosition
			local optionsSize = multiOptionsFrame.AbsoluteSize
			
			if not (mousePos.X >= dropdownAbsPos.X and mousePos.X <= dropdownAbsPos.X + dropdownSize.X and
				   mousePos.Y >= dropdownAbsPos.Y and mousePos.Y <= dropdownAbsPos.Y + dropdownSize.Y + optionsSize.Y) then
				multiIsOpen = false
				multiDropdown.ZIndex = 10  -- Reset z-index
				TweenService:Create(multiArrow, TweenInfo.new(0.2), {Rotation = 0}):Play()
				TweenService:Create(multiOptionsFrame, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 0)}):Play()
				wait(0.2)
				multiOptionsFrame.Visible = false
			end
		end
	end
	
	UserInputService.InputBegan:Connect(closeMultiDropdown)
	
	-- Create multi dropdown object with methods
	local multiDropdownObj = {}
	
	function multiDropdownObj:GetSelections()
		return multiSelectedOptions
	end
	
	function multiDropdownObj:SetSelections(selections)
		-- Reset all states
		for option, _ in pairs(multiOptionStates) do
			multiOptionStates[option] = false
		end
		
		-- Set new selections
		if selections then
			for _, option in ipairs(selections) do
				if multiOptionStates[option] ~= nil then
					multiOptionStates[option] = true
				end
			end
		end
		
		-- Update display and checkboxes
		updateMultiDisplayText()
		
		for _, multiOptionButton in ipairs(multiOptionButtons) do
			local option = multiOptionButton.Name
			local checkbox = multiOptionButton:FindFirstChild("Checkbox")
			local checkmark = checkbox and checkbox:FindFirstChild("Checkmark")
			local optionText = multiOptionButton:FindFirstChild("Text")
			
			if checkbox and checkmark and optionText then
				if multiOptionStates[option] then
					checkbox.BackgroundColor3 = Theme.Accent
					checkmark.Visible = true
					optionText.TextColor3 = Theme.Text
				else
					checkbox.BackgroundColor3 = Theme.Secondary
					checkmark.Visible = false
					optionText.TextColor3 = Theme.TextSecondary
				end
			end
		end
		
		-- Update selected options table
		multiSelectedOptions = {}
		for optionValue, isSelected in pairs(multiOptionStates) do
			if isSelected then
				table.insert(multiSelectedOptions, optionValue)
			end
		end
	end
	
	function multiDropdownObj:ClearSelections()
		multiDropdownObj:SetSelections({})
	end
	
	function multiDropdownObj:GetInstance()
		return multiDropdown
	end
	
	return multiDropdownObj
end

function GuiLibrary:CreateSeparator(tab, separatorName)
    local separator = Instance.new("Frame")
    separator.Name = "Separator_" .. separatorName
    separator.Size = UDim2.new(1, 0, 0, 25)
    separator.BackgroundTransparency = 1
    separator.Parent = tab.Frame
    
    local line = Instance.new("Frame")
    line.Name = "Line"
    line.Size = UDim2.new(1, -20, 0, 1)
    line.Position = UDim2.new(0, 10, 0.5, 0)
    line.BackgroundColor3 = Theme.Secondary
    line.BorderSizePixel = 0
    line.Parent = separator
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.Size = UDim2.new(0.4, 0, 0, 20)
    label.Position = UDim2.new(0.5, -50, 0, 2)
    label.BackgroundColor3 = Theme.Background
    label.BorderSizePixel = 0
    label.Text = separatorName or ""
    label.TextColor3 = Theme.TextSecondary
    label.TextSize = 12
    label.Font = Enum.Font.Gotham
    label.Parent = separator
    
    local labelCorner = Instance.new("UICorner")
    labelCorner.CornerRadius = UDim.new(0, 4)
    labelCorner.Parent = label
    
    return separator
end

function GuiLibrary:CreateColorPicker(tab, pickerName, defaultColor, callback)
    local defaultColor = defaultColor or Color3.fromRGB(255, 255, 255)
    
    local colorPicker = Instance.new("TextButton")
    colorPicker.Name = "ColorPicker_" .. pickerName
    colorPicker.Size = UDim2.new(1, 0, 0, 35)
    colorPicker.BackgroundColor3 = Theme.Secondary
    colorPicker.BorderSizePixel = 0
    colorPicker.Text = ""
    colorPicker.Parent = tab.Frame
    
    local colorPickerCorner = Instance.new("UICorner")
    colorPickerCorner.CornerRadius = UDim.new(0, 8)
    colorPickerCorner.Parent = colorPicker
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.Size = UDim2.new(0.7, 0, 1, 0)
    label.Position = UDim2.new(0, 15, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = pickerName
    label.TextColor3 = Theme.Text
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Font = Enum.Font.Gotham
    label.Parent = colorPicker
    
    local colorPreview = Instance.new("Frame")
    colorPreview.Name = "ColorPreview"
    colorPreview.Size = UDim2.new(0, 25, 0, 25)
    colorPreview.Position = UDim2.new(1, -35, 0.5, -12.5)
    colorPreview.BackgroundColor3 = defaultColor
    colorPreview.BorderSizePixel = 0
    colorPreview.Parent = colorPicker
    
    local colorPreviewCorner = Instance.new("UICorner")
    colorPreviewCorner.CornerRadius = UDim.new(0, 6)
    colorPreviewCorner.Parent = colorPreview
    
    -- Color Picker Window
    local colorWindow = Instance.new("Frame")
    colorWindow.Name = "ColorWindow"
    colorWindow.Size = UDim2.new(0, 250, 0, 200)
    colorWindow.Position = UDim2.new(1, 10, 0, 0)
    colorWindow.BackgroundColor3 = Theme.Background
    colorWindow.BorderSizePixel = 0
    colorWindow.Visible = false
    colorWindow.ZIndex = 50
    colorWindow.Parent = colorPicker
    
    local colorWindowCorner = Instance.new("UICorner")
    colorWindowCorner.CornerRadius = UDim.new(0, 8)
    colorWindowCorner.Parent = colorWindow
    
    local colorWindowShadow = Instance.new("ImageLabel")
    colorWindowShadow.Name = "Shadow"
    colorWindowShadow.Size = UDim2.new(1, 10, 1, 10)
    colorWindowShadow.Position = UDim2.new(0, -5, 0, -5)
    colorWindowShadow.BackgroundTransparency = 1
    colorWindowShadow.Image = "rbxassetid://1316045217"
    colorWindowShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    colorWindowShadow.ImageTransparency = 0.8
    colorWindowShadow.ScaleType = Enum.ScaleType.Slice
    colorWindowShadow.SliceCenter = Rect.new(10, 10, 118, 118)
    colorWindowShadow.ZIndex = 49
    colorWindowShadow.Parent = colorWindow
    
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Size = UDim2.new(1, 0, 0, 30)
    title.BackgroundColor3 = Theme.Secondary
    title.BorderSizePixel = 0
    title.Text = pickerName
    title.TextColor3 = Theme.Text
    title.TextSize = 14
    title.Font = Enum.Font.Gotham
    title.ZIndex = 51
    title.Parent = colorWindow
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 8)
    titleCorner.Parent = title
    
    -- Color Wheel
    local colorWheel = Instance.new("ImageLabel")
    colorWheel.Name = "ColorWheel"
    colorWheel.Size = UDim2.new(0, 120, 0, 120)
    colorWheel.Position = UDim2.new(0, 15, 0, 40)
    colorWheel.BackgroundTransparency = 1
    colorWheel.Image = "rbxassetid://13777638835" -- Color wheel image
    colorWheel.ZIndex = 51
    colorWheel.Parent = colorWindow
    
    local colorWheelCursor = Instance.new("Frame")
    colorWheelCursor.Name = "Cursor"
    colorWheelCursor.Size = UDim2.new(0, 8, 0, 8)
    colorWheelCursor.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    colorWheelCursor.BorderSizePixel = 1
    colorWheelCursor.BorderColor3 = Color3.fromRGB(0, 0, 0)
    colorWheelCursor.ZIndex = 52
    colorWheelCursor.Visible = false
    colorWheelCursor.Parent = colorWheel
    
    local cursorCorner = Instance.new("UICorner")
    cursorCorner.CornerRadius = UDim.new(1, 0)
    cursorCorner.Parent = colorWheelCursor
    
    -- Brightness Slider
    local brightnessSlider = Instance.new("Frame")
    brightnessSlider.Name = "BrightnessSlider"
    brightnessSlider.Size = UDim2.new(0, 20, 0, 120)
    brightnessSlider.Position = UDim2.new(0, 150, 0, 40)
    brightnessSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    brightnessSlider.BorderSizePixel = 0
    brightnessSlider.ZIndex = 51
    brightnessSlider.Parent = colorWindow
    
    local brightnessGradient = Instance.new("UIGradient")
    brightnessGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
    })
    brightnessGradient.Rotation = 90
    brightnessGradient.Parent = brightnessSlider
    
    local brightnessCorner = Instance.new("UICorner")
    brightnessCorner.CornerRadius = UDim.new(0, 4)
    brightnessCorner.Parent = brightnessSlider
    
    local brightnessCursor = Instance.new("Frame")
    brightnessCursor.Name = "Cursor"
    brightnessCursor.Size = UDim2.new(1, 4, 0, 6)
    brightnessCursor.Position = UDim2.new(0, -2, 0.5, -3)
    brightnessCursor.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    brightnessCursor.BorderSizePixel = 1
    brightnessCursor.BorderColor3 = Color3.fromRGB(0, 0, 0)
    brightnessCursor.ZIndex = 52
    brightnessCursor.Parent = brightnessSlider
    
    local brightnessCursorCorner = Instance.new("UICorner")
    brightnessCursorCorner.CornerRadius = UDim.new(0, 2)
    brightnessCursorCorner.Parent = brightnessCursor
    
    -- Current Color Display
    local currentColorDisplay = Instance.new("Frame")
    currentColorDisplay.Name = "CurrentColor"
    currentColorDisplay.Size = UDim2.new(0, 60, 0, 25)
    currentColorDisplay.Position = UDim2.new(0, 15, 0, 170)
    currentColorDisplay.BackgroundColor3 = defaultColor
    currentColorDisplay.BorderSizePixel = 0
    currentColorDisplay.ZIndex = 51
    currentColorDisplay.Parent = colorWindow
    
    local currentColorCorner = Instance.new("UICorner")
    currentColorCorner.CornerRadius = UDim.new(0, 6)
    currentColorCorner.Parent = currentColorDisplay
    
    -- RGB Inputs
    local rgbInputs = Instance.new("Frame")
    rgbInputs.Name = "RGBInputs"
    rgbInputs.Size = UDim2.new(0, 140, 0, 80)
    rgbInputs.Position = UDim2.new(0, 85, 0, 165)
    rgbInputs.BackgroundTransparency = 1
    rgbInputs.ZIndex = 51
    rgbInputs.Parent = colorWindow
    
    local function createRGBInput(yPosition, labelText, defaultValue)
        local inputFrame = Instance.new("Frame")
        inputFrame.Size = UDim2.new(1, 0, 0, 20)
        inputFrame.Position = UDim2.new(0, 0, 0, yPosition)
        inputFrame.BackgroundTransparency = 1
        inputFrame.ZIndex = 51
        inputFrame.Parent = rgbInputs
        
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(0, 30, 1, 0)
        label.BackgroundTransparency = 1
        label.Text = labelText
        label.TextColor3 = Theme.Text
        label.TextSize = 12
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Font = Enum.Font.Gotham
        label.ZIndex = 51
        label.Parent = inputFrame
        
        local textBox = Instance.new("TextBox")
        textBox.Size = UDim2.new(0, 40, 1, 0)
        textBox.Position = UDim2.new(0, 35, 0, 0)
        textBox.BackgroundColor3 = Theme.Secondary
        textBox.BorderSizePixel = 0
        textBox.Text = tostring(defaultValue)
        textBox.TextColor3 = Theme.Text
        textBox.TextSize = 12
        textBox.Font = Enum.Font.Gotham
        textBox.ZIndex = 51
        textBox.Parent = inputFrame
        
        local textBoxCorner = Instance.new("UICorner")
        textBoxCorner.CornerRadius = UDim.new(0, 4)
        textBoxCorner.Parent = textBox
        
        return textBox
    end
    
    local rInput = createRGBInput(0, "R:", math.floor(defaultColor.R * 255))
    local gInput = createRGBInput(25, "G:", math.floor(defaultColor.G * 255))
    local bInput = createRGBInput(50, "B:", math.floor(defaultColor.B * 255))
    
    -- Close Button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 60, 0, 25)
    closeButton.Position = UDim2.new(1, -70, 0, 170)
    closeButton.BackgroundColor3 = Theme.Accent
    closeButton.BorderSizePixel = 0
    closeButton.Text = "OK"
    closeButton.TextColor3 = Theme.Text
    closeButton.TextSize = 12
    closeButton.Font = Enum.Font.Gotham
    closeButton.ZIndex = 51
    closeButton.Parent = colorWindow
    
    local closeButtonCorner = Instance.new("UICorner")
    closeButtonCorner.CornerRadius = UDim.new(0, 6)
    closeButtonCorner.Parent = closeButton
    
    local isOpen = false
    local currentColor = defaultColor
    local isDraggingWheel = false
    local isDraggingBrightness = false
    
    -- Color conversion functions
    local function HSVtoRGB(h, s, v)
        local r, g, b
        
        local i = math.floor(h * 6)
        local f = h * 6 - i
        local p = v * (1 - s)
        local q = v * (1 - f * s)
        local t = v * (1 - (1 - f) * s)
        
        i = i % 6
        
        if i == 0 then
            r, g, b = v, t, p
        elseif i == 1 then
            r, g, b = q, v, p
        elseif i == 2 then
            r, g, b = p, v, t
        elseif i == 3 then
            r, g, b = p, q, v
        elseif i == 4 then
            r, g, b = t, p, v
        else
            r, g, b = v, p, q
        end
        
        return Color3.new(r, g, b)
    end
    
    local function RGBtoHSV(r, g, b)
        local max = math.max(r, g, b)
        local min = math.min(r, g, b)
        local h, s, v = max, max, max
        
        local d = max - min
        s = max == 0 and 0 or d / max
        
        if max == min then
            h = 0
        else
            if max == r then
                h = (g - b) / d + (g < b and 6 or 0)
            elseif max == g then
                h = (b - r) / d + 2
            elseif max == b then
                h = (r - g) / d + 4
            end
            h = h / 6
        end
        
        return h, s, v
    end
    
    local function updateColorFromWheel(position, brightness)
        local x = (position.X - colorWheel.AbsolutePosition.X) / colorWheel.AbsoluteSize.X
        local y = (position.Y - colorWheel.AbsolutePosition.Y) / colorWheel.AbsoluteSize.Y
        
        x = math.clamp(x, 0, 1)
        y = math.clamp(y, 0, 1)
        
        -- Convert to HSV
        local angle = math.atan2(y - 0.5, x - 0.5)
        local distance = math.sqrt((x - 0.5)^2 + (y - 0.5)^2)
        
        local hue = (angle + math.pi) / (2 * math.pi)
        local saturation = math.clamp(distance * 2, 0, 1)
        local value = brightness or 1
        
        currentColor = HSVtoRGB(hue, saturation, value)
        
        -- Update displays
        colorPreview.BackgroundColor3 = currentColor
        currentColorDisplay.BackgroundColor3 = currentColor
        
        -- Update RGB inputs
        rInput.Text = tostring(math.floor(currentColor.R * 255))
        gInput.Text = tostring(math.floor(currentColor.G * 255))
        bInput.Text = tostring(math.floor(currentColor.B * 255))
        
        if callback then
            callback(currentColor)
        end
    end
    
    local function updateColorFromRGB()
        local r = math.clamp(tonumber(rInput.Text) or 0, 0, 255) / 255
        local g = math.clamp(tonumber(gInput.Text) or 0, 0, 255) / 255
        local b = math.clamp(tonumber(bInput.Text) or 0, 0, 255) / 255
        
        currentColor = Color3.new(r, g, b)
        
        -- Update displays
        colorPreview.BackgroundColor3 = currentColor
        currentColorDisplay.BackgroundColor3 = currentColor
        
        if callback then
            callback(currentColor)
        end
    end
    
    -- Toggle color window
    colorPicker.MouseButton1Click:Connect(function()
        isOpen = not isOpen
        colorWindow.Visible = isOpen
    end)
    
    -- Color wheel interaction
    colorWheel.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDraggingWheel = true
            colorWheelCursor.Visible = true
            updateColorFromWheel(input.Position)
        end
    end)
    
    colorWheel.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDraggingWheel = false
        end
    end)
    
    -- Brightness slider interaction
    brightnessSlider.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDraggingBrightness = true
            local y = (input.Position.Y - brightnessSlider.AbsolutePosition.Y) / brightnessSlider.AbsoluteSize.Y
            y = math.clamp(y, 0, 1)
            brightnessCursor.Position = UDim2.new(0, -2, y, -3)
            updateColorFromWheel(input.Position, 1 - y)
        end
    end)
    
    brightnessSlider.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDraggingBrightness = false
        end
    end)
    
    -- Mouse movement for dragging
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            if isDraggingWheel then
                updateColorFromWheel(input.Position)
            elseif isDraggingBrightness then
                local y = (input.Position.Y - brightnessSlider.AbsolutePosition.Y) / brightnessSlider.AbsoluteSize.Y
                y = math.clamp(y, 0, 1)
                brightnessCursor.Position = UDim2.new(0, -2, y, -3)
                updateColorFromWheel(input.Position, 1 - y)
            end
        end
    end)
    
    -- RGB input changes
    rInput.FocusLost:Connect(updateColorFromRGB)
    gInput.FocusLost:Connect(updateColorFromRGB)
    bInput.FocusLost:Connect(updateColorFromRGB)
    
    -- Close button
    closeButton.MouseButton1Click:Connect(function()
        isOpen = false
        colorWindow.Visible = false
    end)
    
    -- Close when clicking outside
    local function closeColorPicker(input)
        if isOpen and input.UserInputType == Enum.UserInputType.MouseButton1 then
            local mousePos = input.Position
            local colorWindowAbsPos = colorWindow.AbsolutePosition
            local colorWindowSize = colorWindow.AbsoluteSize
            
            if not (mousePos.X >= colorWindowAbsPos.X and mousePos.X <= colorWindowAbsPos.X + colorWindowSize.X and
                   mousePos.Y >= colorWindowAbsPos.Y and mousePos.Y <= colorWindowAbsPos.Y + colorWindowSize.Y) then
                isOpen = false
                colorWindow.Visible = false
            end
        end
    end
    
    UserInputService.InputBegan:Connect(closeColorPicker)
    
    -- Create color picker object with methods
    local colorPickerObj = {}
    
    function colorPickerObj:GetColor()
        return currentColor
    end
    
    function colorPickerObj:SetColor(color)
        currentColor = color
        colorPreview.BackgroundColor3 = color
        currentColorDisplay.BackgroundColor3 = color
        
        rInput.Text = tostring(math.floor(color.R * 255))
        gInput.Text = tostring(math.floor(color.G * 255))
        bInput.Text = tostring(math.floor(color.B * 255))
        
        if callback then
            callback(color)
        end
    end
    
    function colorPickerObj:GetInstance()
        return colorPicker
    end
    
    return colorPickerObj
end


-- Export the library
return GuiLibrary
