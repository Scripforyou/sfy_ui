-- NovaUI Library Implementation
local NovaUI = {}

-- Main Library Setup
function NovaUI:CreateWindow(config)
    local Window = {}
    config = config or {}
    
    Window.Title = config.Title or "NovaUI"
    Window.Theme = config.Theme or "Dark"
    Window.Size = config.Size or UDim2.new(0, 500, 0, 400)
    Window.Tabs = {}
    Window.CurrentTab = nil
    
    -- Create GUI Objects
    local ScreenGui = Instance.new("ScreenGui")
    local MainFrame = Instance.new("Frame")
    local TabContainer = Instance.new("Frame")
    local ContentContainer = Instance.new("Frame")
    local TitleLabel = Instance.new("TextLabel")
    
    ScreenGui.Parent = game.CoreGui
    ScreenGui.Name = "NovaUI"
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    MainFrame.Parent = ScreenGui
    MainFrame.Size = Window.Size
    MainFrame.Position = UDim2.new(0.5, -Window.Size.X.Offset/2, 0.5, -Window.Size.Y.Offset/2)
    MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
    MainFrame.BorderSizePixel = 0
    MainFrame.ClipsDescendants = true
    
    -- Apply theme
    if Window.Theme == "Dark" then
        MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
    elseif Window.Theme == "Light" then
        MainFrame.BackgroundColor3 = Color3.fromRGB(240, 240, 240)
    end
    
    -- Title Bar
    local TitleBar = Instance.new("Frame")
    TitleBar.Parent = MainFrame
    TitleBar.Size = UDim2.new(1, 0, 0, 30)
    TitleBar.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
    TitleBar.BorderSizePixel = 0
    
    TitleLabel.Parent = TitleBar
    TitleLabel.Size = UDim2.new(1, -40, 1, 0)
    TitleLabel.Position = UDim2.new(0, 10, 0, 0)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Text = Window.Title
    TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleLabel.TextSize = 14
    TitleLabel.Font = Enum.Font.GothamSemibold
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Close Button
    local CloseButton = Instance.new("TextButton")
    CloseButton.Parent = TitleBar
    CloseButton.Size = UDim2.new(0, 30, 1, 0)
    CloseButton.Position = UDim2.new(1, -30, 0, 0)
    CloseButton.BackgroundColor3 = Color3.fromRGB(200, 60, 60)
    CloseButton.Text = "X"
    CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.TextSize = 12
    
    CloseButton.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)
    
    -- Tab Container
    TabContainer.Parent = MainFrame
    TabContainer.Size = UDim2.new(1, 0, 0, 40)
    TabContainer.Position = UDim2.new(0, 0, 0, 30)
    TabContainer.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
    TabContainer.BorderSizePixel = 0
    
    -- Content Container
    ContentContainer.Parent = MainFrame
    ContentContainer.Size = UDim2.new(1, 0, 1, -70)
    ContentContainer.Position = UDim2.new(0, 0, 0, 70)
    ContentContainer.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
    ContentContainer.BorderSizePixel = 0
    ContentContainer.ClipsDescendants = true
    
    -- Make window draggable
    local dragging = false
    local dragInput, dragStart, startPos
    
    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    TitleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    -- Tab Creation Function
    function Window:CreateTab(name)
        local Tab = {}
        Tab.Name = name
        Tab.Buttons = {}
        Tab.Sections = {}
        
        -- Create Tab Button
        local TabButton = Instance.new("TextButton")
        TabButton.Parent = TabContainer
        TabButton.Size = UDim2.new(0, 80, 1, 0)
        TabButton.Position = UDim2.new(0, #Window.Tabs * 80, 0, 0)
        TabButton.BackgroundColor3 = Color3.fromRGB(45, 45, 50)
        TabButton.Text = name
        TabButton.TextColor3 = Color3.fromRGB(200, 200, 200)
        TabButton.TextSize = 12
        TabButton.BorderSizePixel = 0
        
        -- Create Tab Content
        local TabContent = Instance.new("ScrollingFrame")
        TabContent.Parent = ContentContainer
        TabContent.Size = UDim2.new(1, 0, 1, 0)
        TabContent.Position = UDim2.new(0, 0, 0, 0)
        TabContent.BackgroundTransparency = 1
        TabContent.ScrollBarThickness = 3
        TabContent.ScrollBarImageColor3 = Color3.fromRGB(80, 80, 85)
        TabContent.Visible = false
        
        -- Auto-size scrolling frame
        local UIListLayout = Instance.new("UIListLayout")
        UIListLayout.Parent = TabContent
        UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        UIListLayout.Padding = UDim.new(0, 5)
        
        TabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
        UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            TabContent.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 10)
        end)
        
        -- Tab activation
        TabButton.MouseButton1Click:Connect(function()
            for _, otherTab in pairs(Window.Tabs) do
                otherTab.Content.Visible = false
                otherTab.Button.BackgroundColor3 = Color3.fromRGB(45, 45, 50)
            end
            TabContent.Visible = true
            TabButton.BackgroundColor3 = Color3.fromRGB(60, 60, 65)
            Window.CurrentTab = Tab
        end)
        
        Tab.Button = TabButton
        Tab.Content = TabContent
        
        -- Section Creation
        function Tab:CreateSection(title)
            local Section = {}
            
            local SectionFrame = Instance.new("Frame")
            SectionFrame.Parent = TabContent
            SectionFrame.Size = UDim2.new(1, -20, 0, 30)
            SectionFrame.Position = UDim2.new(0, 10, 0, #Tab.Sections * 35)
            SectionFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
            SectionFrame.BorderSizePixel = 0
            
            local SectionLabel = Instance.new("TextLabel")
            SectionLabel.Parent = SectionFrame
            SectionLabel.Size = UDim2.new(1, -10, 1, 0)
            SectionLabel.Position = UDim2.new(0, 10, 0, 0)
            SectionLabel.BackgroundTransparency = 1
            SectionLabel.Text = title
            SectionLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            SectionLabel.TextSize = 12
            SectionLabel.Font = Enum.Font.GothamSemibold
            SectionLabel.TextXAlignment = Enum.TextXAlignment.Left
            
            local ElementsContainer = Instance.new("Frame")
            ElementsContainer.Parent = TabContent
            ElementsContainer.Size = UDim2.new(1, -20, 0, 0)
            ElementsContainer.Position = UDim2.new(0, 10, 0, #Tab.Sections * 35 + 30)
            ElementsContainer.BackgroundTransparency = 1
            ElementsContainer.LayoutOrder = #Tab.Sections + 1
            
            local ElementsList = Instance.new("UIListLayout")
            ElementsList.Parent = ElementsContainer
            ElementsList.SortOrder = Enum.SortOrder.LayoutOrder
            ElementsList.Padding = UDim.new(0, 5)
            
            -- Toggle Element
            function Section:CreateToggle(config)
                local Toggle = {}
                config = config or {}
                
                local ToggleFrame = Instance.new("Frame")
                ToggleFrame.Parent = ElementsContainer
                ToggleFrame.Size = UDim2.new(1, 0, 0, 30)
                ToggleFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 55)
                ToggleFrame.BorderSizePixel = 0
                
                local ToggleLabel = Instance.new("TextLabel")
                ToggleLabel.Parent = ToggleFrame
                ToggleLabel.Size = UDim2.new(0.7, 0, 1, 0)
                ToggleLabel.Position = UDim2.new(0, 10, 0, 0)
                ToggleLabel.BackgroundTransparency = 1
                ToggleLabel.Text = config.Title or "Toggle"
                ToggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                ToggleLabel.TextSize = 12
                ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
                
                local ToggleButton = Instance.new("TextButton")
                ToggleButton.Parent = ToggleFrame
                ToggleButton.Size = UDim2.new(0, 40, 0, 20)
                ToggleButton.Position = UDim2.new(1, -50, 0.5, -10)
                ToggleButton.BackgroundColor3 = Color3.fromRGB(80, 80, 85)
                ToggleButton.Text = ""
                ToggleButton.BorderSizePixel = 0
                
                local ToggleDot = Instance.new("Frame")
                ToggleDot.Parent = ToggleButton
                ToggleDot.Size = UDim2.new(0, 16, 0, 16)
                ToggleDot.Position = UDim2.new(0, 2, 0.5, -8)
                ToggleDot.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
                ToggleDot.BorderSizePixel = 0
                
                local state = config.Default or false
                
                local function updateToggle()
                    if state then
                        ToggleDot.Position = UDim2.new(1, -18, 0.5, -8)
                        ToggleButton.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
                    else
                        ToggleDot.Position = UDim2.new(0, 2, 0.5, -8)
                        ToggleButton.BackgroundColor3 = Color3.fromRGB(80, 80, 85)
                    end
                end
                
                updateToggle()
                
                ToggleButton.MouseButton1Click:Connect(function()
                    state = not state
                    updateToggle()
                    if config.Callback then
                        config.Callback(state)
                    end
                end)
                
                return Toggle
            end
            
            -- Button Element
            function Section:CreateButton(config)
                local Button = {}
                config = config or {}
                
                local ButtonFrame = Instance.new("TextButton")
                ButtonFrame.Parent = ElementsContainer
                ButtonFrame.Size = UDim2.new(1, 0, 0, 30)
                ButtonFrame.BackgroundColor3 = Color3.fromRGB(60, 60, 65)
                ButtonFrame.BorderSizePixel = 0
                ButtonFrame.Text = config.Title or "Button"
                ButtonFrame.TextColor3 = Color3.fromRGB(255, 255, 255)
                ButtonFrame.TextSize = 12
                
                ButtonFrame.MouseButton1Click:Connect(function()
                    if config.Callback then
                        config.Callback()
                    end
                end)
                
                return Button
            end
            
            -- Slider Element
            function Section:CreateSlider(config)
                local Slider = {}
                config = config or {}
                
                local min = config.Min or 0
                local max = config.Max or 100
                local default = config.Default or min
                
                local SliderFrame = Instance.new("Frame")
                SliderFrame.Parent = ElementsContainer
                SliderFrame.Size = UDim2.new(1, 0, 0, 40)
                SliderFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 55)
                SliderFrame.BorderSizePixel = 0
                
                local SliderLabel = Instance.new("TextLabel")
                SliderLabel.Parent = SliderFrame
                SliderLabel.Size = UDim2.new(1, -10, 0, 20)
                SliderLabel.Position = UDim2.new(0, 10, 0, 0)
                SliderLabel.BackgroundTransparency = 1
                SliderLabel.Text = config.Title or "Slider"
                SliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                SliderLabel.TextSize = 12
                SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
                
                local ValueLabel = Instance.new("TextLabel")
                ValueLabel.Parent = SliderFrame
                ValueLabel.Size = UDim2.new(0, 50, 0, 20)
                ValueLabel.Position = UDim2.new(1, -60, 0, 0)
                ValueLabel.BackgroundTransparency = 1
                ValueLabel.Text = tostring(default)
                ValueLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
                ValueLabel.TextSize = 12
                ValueLabel.TextXAlignment = Enum.TextXAlignment.Right
                
                local SliderTrack = Instance.new("Frame")
                SliderTrack.Parent = SliderFrame
                SliderTrack.Size = UDim2.new(1, -20, 0, 4)
                SliderTrack.Position = UDim2.new(0, 10, 1, -15)
                SliderTrack.BackgroundColor3 = Color3.fromRGB(80, 80, 85)
                SliderTrack.BorderSizePixel = 0
                
                local SliderFill = Instance.new("Frame")
                SliderFill.Parent = SliderTrack
                SliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
                SliderFill.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
                SliderFill.BorderSizePixel = 0
                
                local SliderButton = Instance.new("TextButton")
                SliderButton.Parent = SliderTrack
                SliderButton.Size = UDim2.new(0, 12, 0, 12)
                SliderButton.Position = UDim2.new((default - min) / (max - min), -6, 0.5, -6)
                SliderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SliderButton.Text = ""
                SliderButton.BorderSizePixel = 0
                
                local dragging = false
                
                local function updateSlider(value)
                    local percent = (value - min) / (max - min)
                    SliderFill.Size = UDim2.new(percent, 0, 1, 0)
                    SliderButton.Position = UDim2.new(percent, -6, 0.5, -6)
                    ValueLabel.Text = tostring(math.floor(value))
                    
                    if config.Callback then
                        config.Callback(value)
                    end
                end
                
                SliderButton.MouseButton1Down:Connect(function()
                    dragging = true
                end)
                
                game:GetService("UserInputService").InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                
                SliderTrack.MouseButton1Down:Connect(function(x, y)
                    local percent = math.clamp((x - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X, 0, 1)
                    local value = min + (max - min) * percent
                    updateSlider(value)
                end)
                
                game:GetService("UserInputService").InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local mouse = game:GetService("Players").LocalPlayer:GetMouse()
                        local percent = math.clamp((mouse.X - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X, 0, 1)
                        local value = min + (max - min) * percent
                        updateSlider(value)
                    end
                end)
                
                return Slider
            end
            
            table.insert(Tab.Sections, Section)
            return Section
        end
        
        table.insert(Window.Tabs, Tab)
        
        -- Activate first tab
        if #Window.Tabs == 1 then
            TabButton.BackgroundColor3 = Color3.fromRGB(60, 60, 65)
            TabContent.Visible = true
            Window.CurrentTab = Tab
        end
        
        return Tab
    end
    
    return Window
end

return NovaUIa-- NovaUI Library Implementation
local NovaUI = {}

-- Main Library Setup
function NovaUI:CreateWindow(config)
    local Window = {}
    config = config or {}
    
    Window.Title = config.Title or "NovaUI"
    Window.Theme = config.Theme or "Dark"
    Window.Size = config.Size or UDim2.new(0, 500, 0, 400)
    Window.Tabs = {}
    Window.CurrentTab = nil
    
    -- Create GUI Objects
    local ScreenGui = Instance.new("ScreenGui")
    local MainFrame = Instance.new("Frame")
    local TabContainer = Instance.new("Frame")
    local ContentContainer = Instance.new("Frame")
    local TitleLabel = Instance.new("TextLabel")
    
    ScreenGui.Parent = game.CoreGui
    ScreenGui.Name = "NovaUI"
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    MainFrame.Parent = ScreenGui
    MainFrame.Size = Window.Size
    MainFrame.Position = UDim2.new(0.5, -Window.Size.X.Offset/2, 0.5, -Window.Size.Y.Offset/2)
    MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
    MainFrame.BorderSizePixel = 0
    MainFrame.ClipsDescendants = true
    
    -- Apply theme
    if Window.Theme == "Dark" then
        MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
    elseif Window.Theme == "Light" then
        MainFrame.BackgroundColor3 = Color3.fromRGB(240, 240, 240)
    end
    
    -- Title Bar
    local TitleBar = Instance.new("Frame")
    TitleBar.Parent = MainFrame
    TitleBar.Size = UDim2.new(1, 0, 0, 30)
    TitleBar.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
    TitleBar.BorderSizePixel = 0
    
    TitleLabel.Parent = TitleBar
    TitleLabel.Size = UDim2.new(1, -40, 1, 0)
    TitleLabel.Position = UDim2.new(0, 10, 0, 0)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Text = Window.Title
    TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleLabel.TextSize = 14
    TitleLabel.Font = Enum.Font.GothamSemibold
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Close Button
    local CloseButton = Instance.new("TextButton")
    CloseButton.Parent = TitleBar
    CloseButton.Size = UDim2.new(0, 30, 1, 0)
    CloseButton.Position = UDim2.new(1, -30, 0, 0)
    CloseButton.BackgroundColor3 = Color3.fromRGB(200, 60, 60)
    CloseButton.Text = "X"
    CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.TextSize = 12
    
    CloseButton.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)
    
    -- Tab Container
    TabContainer.Parent = MainFrame
    TabContainer.Size = UDim2.new(1, 0, 0, 40)
    TabContainer.Position = UDim2.new(0, 0, 0, 30)
    TabContainer.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
    TabContainer.BorderSizePixel = 0
    
    -- Content Container
    ContentContainer.Parent = MainFrame
    ContentContainer.Size = UDim2.new(1, 0, 1, -70)
    ContentContainer.Position = UDim2.new(0, 0, 0, 70)
    ContentContainer.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
    ContentContainer.BorderSizePixel = 0
    ContentContainer.ClipsDescendants = true
    
    -- Make window draggable
    local dragging = false
    local dragInput, dragStart, startPos
    
    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    TitleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    -- Tab Creation Function
    function Window:CreateTab(name)
        local Tab = {}
        Tab.Name = name
        Tab.Buttons = {}
        Tab.Sections = {}
        
        -- Create Tab Button
        local TabButton = Instance.new("TextButton")
        TabButton.Parent = TabContainer
        TabButton.Size = UDim2.new(0, 80, 1, 0)
        TabButton.Position = UDim2.new(0, #Window.Tabs * 80, 0, 0)
        TabButton.BackgroundColor3 = Color3.fromRGB(45, 45, 50)
        TabButton.Text = name
        TabButton.TextColor3 = Color3.fromRGB(200, 200, 200)
        TabButton.TextSize = 12
        TabButton.BorderSizePixel = 0
        
        -- Create Tab Content
        local TabContent = Instance.new("ScrollingFrame")
        TabContent.Parent = ContentContainer
        TabContent.Size = UDim2.new(1, 0, 1, 0)
        TabContent.Position = UDim2.new(0, 0, 0, 0)
        TabContent.BackgroundTransparency = 1
        TabContent.ScrollBarThickness = 3
        TabContent.ScrollBarImageColor3 = Color3.fromRGB(80, 80, 85)
        TabContent.Visible = false
        
        -- Auto-size scrolling frame
        local UIListLayout = Instance.new("UIListLayout")
        UIListLayout.Parent = TabContent
        UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        UIListLayout.Padding = UDim.new(0, 5)
        
        TabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
        UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            TabContent.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 10)
        end)
        
        -- Tab activation
        TabButton.MouseButton1Click:Connect(function()
            for _, otherTab in pairs(Window.Tabs) do
                otherTab.Content.Visible = false
                otherTab.Button.BackgroundColor3 = Color3.fromRGB(45, 45, 50)
            end
            TabContent.Visible = true
            TabButton.BackgroundColor3 = Color3.fromRGB(60, 60, 65)
            Window.CurrentTab = Tab
        end)
        
        Tab.Button = TabButton
        Tab.Content = TabContent
        
        -- Section Creation
        function Tab:CreateSection(title)
            local Section = {}
            
            local SectionFrame = Instance.new("Frame")
            SectionFrame.Parent = TabContent
            SectionFrame.Size = UDim2.new(1, -20, 0, 30)
            SectionFrame.Position = UDim2.new(0, 10, 0, #Tab.Sections * 35)
            SectionFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
            SectionFrame.BorderSizePixel = 0
            
            local SectionLabel = Instance.new("TextLabel")
            SectionLabel.Parent = SectionFrame
            SectionLabel.Size = UDim2.new(1, -10, 1, 0)
            SectionLabel.Position = UDim2.new(0, 10, 0, 0)
            SectionLabel.BackgroundTransparency = 1
            SectionLabel.Text = title
            SectionLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            SectionLabel.TextSize = 12
            SectionLabel.Font = Enum.Font.GothamSemibold
            SectionLabel.TextXAlignment = Enum.TextXAlignment.Left
            
            local ElementsContainer = Instance.new("Frame")
            ElementsContainer.Parent = TabContent
            ElementsContainer.Size = UDim2.new(1, -20, 0, 0)
            ElementsContainer.Position = UDim2.new(0, 10, 0, #Tab.Sections * 35 + 30)
            ElementsContainer.BackgroundTransparency = 1
            ElementsContainer.LayoutOrder = #Tab.Sections + 1
            
            local ElementsList = Instance.new("UIListLayout")
            ElementsList.Parent = ElementsContainer
            ElementsList.SortOrder = Enum.SortOrder.LayoutOrder
            ElementsList.Padding = UDim.new(0, 5)
            
            -- Toggle Element
            function Section:CreateToggle(config)
                local Toggle = {}
                config = config or {}
                
                local ToggleFrame = Instance.new("Frame")
                ToggleFrame.Parent = ElementsContainer
                ToggleFrame.Size = UDim2.new(1, 0, 0, 30)
                ToggleFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 55)
                ToggleFrame.BorderSizePixel = 0
                
                local ToggleLabel = Instance.new("TextLabel")
                ToggleLabel.Parent = ToggleFrame
                ToggleLabel.Size = UDim2.new(0.7, 0, 1, 0)
                ToggleLabel.Position = UDim2.new(0, 10, 0, 0)
                ToggleLabel.BackgroundTransparency = 1
                ToggleLabel.Text = config.Title or "Toggle"
                ToggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                ToggleLabel.TextSize = 12
                ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
                
                local ToggleButton = Instance.new("TextButton")
                ToggleButton.Parent = ToggleFrame
                ToggleButton.Size = UDim2.new(0, 40, 0, 20)
                ToggleButton.Position = UDim2.new(1, -50, 0.5, -10)
                ToggleButton.BackgroundColor3 = Color3.fromRGB(80, 80, 85)
                ToggleButton.Text = ""
                ToggleButton.BorderSizePixel = 0
                
                local ToggleDot = Instance.new("Frame")
                ToggleDot.Parent = ToggleButton
                ToggleDot.Size = UDim2.new(0, 16, 0, 16)
                ToggleDot.Position = UDim2.new(0, 2, 0.5, -8)
                ToggleDot.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
                ToggleDot.BorderSizePixel = 0
                
                local state = config.Default or false
                
                local function updateToggle()
                    if state then
                        ToggleDot.Position = UDim2.new(1, -18, 0.5, -8)
                        ToggleButton.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
                    else
                        ToggleDot.Position = UDim2.new(0, 2, 0.5, -8)
                        ToggleButton.BackgroundColor3 = Color3.fromRGB(80, 80, 85)
                    end
                end
                
                updateToggle()
                
                ToggleButton.MouseButton1Click:Connect(function()
                    state = not state
                    updateToggle()
                    if config.Callback then
                        config.Callback(state)
                    end
                end)
                
                return Toggle
            end
            
            -- Button Element
            function Section:CreateButton(config)
                local Button = {}
                config = config or {}
                
                local ButtonFrame = Instance.new("TextButton")
                ButtonFrame.Parent = ElementsContainer
                ButtonFrame.Size = UDim2.new(1, 0, 0, 30)
                ButtonFrame.BackgroundColor3 = Color3.fromRGB(60, 60, 65)
                ButtonFrame.BorderSizePixel = 0
                ButtonFrame.Text = config.Title or "Button"
                ButtonFrame.TextColor3 = Color3.fromRGB(255, 255, 255)
                ButtonFrame.TextSize = 12
                
                ButtonFrame.MouseButton1Click:Connect(function()
                    if config.Callback then
                        config.Callback()
                    end
                end)
                
                return Button
            end
            
            -- Slider Element
            function Section:CreateSlider(config)
                local Slider = {}
                config = config or {}
                
                local min = config.Min or 0
                local max = config.Max or 100
                local default = config.Default or min
                
                local SliderFrame = Instance.new("Frame")
                SliderFrame.Parent = ElementsContainer
                SliderFrame.Size = UDim2.new(1, 0, 0, 40)
                SliderFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 55)
                SliderFrame.BorderSizePixel = 0
                
                local SliderLabel = Instance.new("TextLabel")
                SliderLabel.Parent = SliderFrame
                SliderLabel.Size = UDim2.new(1, -10, 0, 20)
                SliderLabel.Position = UDim2.new(0, 10, 0, 0)
                SliderLabel.BackgroundTransparency = 1
                SliderLabel.Text = config.Title or "Slider"
                SliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                SliderLabel.TextSize = 12
                SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
                
                local ValueLabel = Instance.new("TextLabel")
                ValueLabel.Parent = SliderFrame
                ValueLabel.Size = UDim2.new(0, 50, 0, 20)
                ValueLabel.Position = UDim2.new(1, -60, 0, 0)
                ValueLabel.BackgroundTransparency = 1
                ValueLabel.Text = tostring(default)
                ValueLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
                ValueLabel.TextSize = 12
                ValueLabel.TextXAlignment = Enum.TextXAlignment.Right
                
                local SliderTrack = Instance.new("Frame")
                SliderTrack.Parent = SliderFrame
                SliderTrack.Size = UDim2.new(1, -20, 0, 4)
                SliderTrack.Position = UDim2.new(0, 10, 1, -15)
                SliderTrack.BackgroundColor3 = Color3.fromRGB(80, 80, 85)
                SliderTrack.BorderSizePixel = 0
                
                local SliderFill = Instance.new("Frame")
                SliderFill.Parent = SliderTrack
                SliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
                SliderFill.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
                SliderFill.BorderSizePixel = 0
                
                local SliderButton = Instance.new("TextButton")
                SliderButton.Parent = SliderTrack
                SliderButton.Size = UDim2.new(0, 12, 0, 12)
                SliderButton.Position = UDim2.new((default - min) / (max - min), -6, 0.5, -6)
                SliderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SliderButton.Text = ""
                SliderButton.BorderSizePixel = 0
                
                local dragging = false
                
                local function updateSlider(value)
                    local percent = (value - min) / (max - min)
                    SliderFill.Size = UDim2.new(percent, 0, 1, 0)
                    SliderButton.Position = UDim2.new(percent, -6, 0.5, -6)
                    ValueLabel.Text = tostring(math.floor(value))
                    
                    if config.Callback then
                        config.Callback(value)
                    end
                end
                
                SliderButton.MouseButton1Down:Connect(function()
                    dragging = true
                end)
                
                game:GetService("UserInputService").InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                
                SliderTrack.MouseButton1Down:Connect(function(x, y)
                    local percent = math.clamp((x - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X, 0, 1)
                    local value = min + (max - min) * percent
                    updateSlider(value)
                end)
                
                game:GetService("UserInputService").InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local mouse = game:GetService("Players").LocalPlayer:GetMouse()
                        local percent = math.clamp((mouse.X - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X, 0, 1)
                        local value = min + (max - min) * percent
                        updateSlider(value)
                    end
                end)
                
                return Slider
            end
            
            table.insert(Tab.Sections, Section)
            return Section
        end
        
        table.insert(Window.Tabs, Tab)
        
        -- Activate first tab
        if #Window.Tabs == 1 then
            TabButton.BackgroundColor3 = Color3.fromRGB(60, 60, 65)
            TabContent.Visible = true
            Window.CurrentTab = Tab
        end
        
        return Tab
    end
    
    return Window
end

return NovaUI
